#!/bin/python3      
import os
import sys

script_dir = os.path.dirname(os.path.realpath(__file__))
sys.path.append(script_dir)

import numpy as np
import rospy
from cv_project.msg import setpoint, robotState, robotMeasurement
from utils.math_utils import *

def in_fixed_pose(point, quat):
    
    msg = setpoint()
    msg.end_pos.x = point[0]
    msg.end_pos.y = point[1]
    msg.end_pos.z = point[2]
    
    msg.end_quat.w = quat[0]
    msg.end_quat.x = quat[1]
    msg.end_quat.y = quat[2]
    msg.end_quat.z = quat[3]
    
    msg.end_vel.x = 0
    msg.end_vel.y = 0
    msg.end_vel.z = 0
    
    msg.end_w.x = 0
    msg.end_w.y = 0
    msg.end_w.z = 0
    
    return msg

    
class StateSubscriber:
    def __init__(self, agent_ID):
        self.latest_msg = robotState()
        self.initial_msg = robotState()
        self.latest_msg.header.stamp.from_sec(0.0)
        
        sub_topic_name = "/simulator/state_"+str(agent_ID)
        self.sub = rospy.Subscriber(sub_topic_name, robotState, self.callback)
        
    def callback(self, msg):            
        self.latest_msg = msg

    def get_state(self):
        return self.latest_msg
    
    def get_initial_state(self):
        return self.initial_msg
    


def run():
    try:
        rospy.init_node("trajectory_generator")
        agent_ID = rospy.get_param("~agent_id")
        pub_topic_name = "/robot_" + str(agent_ID) + "/trajectory_generator/setpoint"
        pub = rospy.Publisher(pub_topic_name, setpoint, queue_size=10)
        state_sub = StateSubscriber(agent_ID)
        rate = rospy.Rate(10)
        while not rospy.is_shutdown():  
            time = state_sub.latest_msg.header.stamp.to_sec()
            if time < 5:          
                points = [[0.5, 0.5, 0.5],
                        [0.5, -0.5, 0.5],
                        [-0.5, -0.5, 0.5],
                        [-0.5, 0.5, 0.5]]
                eulers=[[np.pi*3/4, 0, 0],
                    [np.pi/4, 0, 0],
                    [-np.pi/4, 0, 0],
                    [-np.pi*3/4, 0, 0]]
            elif time < 30:
                # points = [[0.7, 0.0, 0.6],
                #         [0.0, -0.7, 0.6],
                #         [-0.7, 0.0, 0.6],
                #         [0.0, 0.7, 0.6]]
                points = [[0.9, 0.0, 0.7],
                        [0.0, -0.9, 0.7],
                        [-0.9, 0.0, 0.7],
                        [0.0, 0.9, 0.7]]
                eulers=[[np.pi/2, np.pi/6, 0],
                    [0, np.pi/6, 0],
                    [-np.pi/2, np.pi/6, 0],
                    [-np.pi, np.pi/6   , 0]]
            else:
                points = [[0.7, 0.0, 1.0],
                        [0.0, -0.7, 1.0],
                        [-0.7, 0.0, 1.0],
                        [0.0, 0.7, 1.0]]
                eulers=[[np.pi/2, 0, 0],
                    [0, 0, 0],
                    [-np.pi/2, 0, 0],
                    [-np.pi, 0, 0]]
                

            msg = in_fixed_pose(points[agent_ID], zyx_euler_to_quat(eulers[agent_ID], in_degree=False))
            
            pub.publish(msg)
            rate.sleep()
        
    except rospy.ROSException:
        pass

if __name__ == '__main__':
    run()