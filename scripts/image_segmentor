#!/bin/python3
import os
import sys

script_dir = os.path.dirname(os.path.realpath(__file__))
sys.path.append(script_dir)

import numpy as np
import rospy
from cv_project.msg import clothMask
from utils.math_utils import *
from std_msgs.msg import *
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
from ultralytics import YOLO
import cv2
import torch
import time
import csv

# Image segementation node - by YOLOv8
    
class ImageSegmentor:
    def __init__(self):
        self.bridge = CvBridge()
        rospy.init_node("segmentor")
        agent_id = rospy.get_param("~agent_id")
        model_dir = rospy.get_param("~model_dir")
        self.init_segmentor_by_params(agent_id, model_dir)
        init_pub = rospy.Publisher("~initialized", Bool, queue_size=2, latch=True)
        init_pub.publish(data=True)
        
    def init_segmentor_by_params(self, agent_id, model_dir):
        self.model:YOLO = YOLO(model_dir)
        if(torch.cuda.is_available()):
            self.model.to("cuda")
            print("YOLO model set to cuda")
        self.agent_id = agent_id
        self.img_sub = ViewSubscriber(agent_id, self)
        self.mask_pub = MaskPublisher(agent_id)

        # for test
        self.seg_vis_pub = rospy.Publisher("~seg_vis", Image, queue_size=3)
        self.init_logger(agent_id)
        
    def mask_to_msg(self, binary_mask: np.ndarray, header=None, encoding="mono8") -> clothMask:
        msg = clothMask()
        
        if header is not None:
            msg.header = header
        else:
            msg.header.stamp = rospy.Time.now()
            msg.header.frame_id = "camera_frame"

        if len(binary_mask.shape) == 3 and binary_mask.shape[2] == 1:
            binary_mask = binary_mask.squeeze(axis=2)

        msg.height, msg.width = binary_mask.shape
        msg.data = binary_mask.astype(np.uint8).flatten().tolist()
        msg.encoding = encoding
        return msg
            
    def segment_image(self, image_msg:Image, agent_ID):   # called by the callback of ViewSubscribers
        # segment image
        img = self.bridge.imgmsg_to_cv2(image_msg) # BGR image
        start_time = time.time()
        results = self.model(img, verbose=False)[0]
        end_time = time.time()
        duration = (end_time - start_time) * 1000 # [ms]
        # print(f"inference: {duration:.2f} ms")
        if results.masks is not None and results.masks.data is not None:
            data = np.any(results.masks.data.cpu().numpy(), axis=0).astype(np.uint8)
        else:
            H, W = img.shape[:2]
            data = np.zeros((H,W), dtype=np.uint8)
            
        # store result to publisher
        msg = self.mask_to_msg(data, image_msg.header)
        self.mask_pub.update_msg(msg)
        # self.mask_pub[agent_ID].update_msg(msg)
    
        # publish data 
        self.mask_pub.pub()
        # self.mask_pub[agent_ID].pub()
        
        # save inference time log
        self.log_inference_time_csv(image_msg.header.stamp.to_sec(), duration)
    
        # segmentation test
        self.seg_vis_pub.publish(self.bridge.cv2_to_imgmsg(255 * data, encoding="mono8"))
        # self.seg_vis_pub[agent_ID].publish(self.bridge.cv2_to_imgmsg(255 * data, encoding="mono8"))
        
    def log_inference_time_csv(self, timestamp, inference_time):        
        with open(self.log_path, mode='a', newline='') as file:
            writer = csv.writer(file)
            writer.writerow([timestamp, inference_time])
            
    def init_logger(self, agent_id):
        log_dir = os.path.join(script_dir, "../logs")
        os.makedirs(log_dir, exist_ok=True)
        self.log_path = os.path.join(log_dir, f"yolo_inference_time_{agent_id}.csv")
        with open(self.log_path, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(["timestamp", "inference_time"])
            
                
        
class ViewSubscriber:
    def __init__(self, agent_ID, parent_segmentor:ImageSegmentor=None):
        self.last_msg = Image()
        self.parent = parent_segmentor  # assign member
        self.agent_ID = agent_ID
        self.sub_topic_name = "/simulator/view_" + str(agent_ID)
        self.subscriber = rospy.Subscriber(self.sub_topic_name, Image, self.callback)
        
    def callback(self, msg):
        # self.last_msg = msg
        if self.parent is not None:
            self.parent.segment_image(msg, self.agent_ID)
    
class MaskPublisher:
    def __init__(self, agent_ID):
        self.last_msg = clothMask()
        self.agent_ID = agent_ID
        self.topic_name = "~cloth_mask"
        self.publisher = rospy.Publisher(self.topic_name, clothMask, queue_size=5)
    
    def update_msg(self, msg:clothMask):
        self.last_msg = msg
    
    def pub(self):
        self.publisher.publish(self.last_msg)
    

if __name__ == '__main__':
    segmentor = ImageSegmentor()
    rospy.spin()